scalar JSON
scalar DateTime

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
}

interface Connection {
  totalCount: Int!
  pageInfo: PageInfo!
}

type PageInfo {
  hasNextPage: Boolean!
  # hasPreviousPage: Boolean!
  # startCursor: String
  # endCursor: String
}

type RegisteredTestsConnection implements Connection {
  totalCount: Int!
  edges: [RegisteredTestsEdge!]!
  pageInfo: PageInfo!
}

type RegisteredTestsEdge implements Edge {
  cursor: String!
  node: RegisteredTest
}

type Interval {
  milliseconds: Int!
  human: String!
}

type Error {
  name: String!
  message: String!
  stack: String!
}

type Label {
  name: String!
  value: String!
}

type RegisteredTest implements Node {
  configuration: JSON
  consecutiveFailureCount: Int
  explain: JSON
  explainIsAvailable: Boolean!
  id: ID!
  interval: Interval!
  labels: [Label!]!
  lastError: Error
  lastTestedAt: DateTime
  name: String!
  priority: Int
  testIsFailing: Boolean
}

type Query {
  getRegisteredTestById (
    registeredTestId: ID!
  ): RegisteredTest!
  registeredTests: RegisteredTestsConnection!
  failingRegisteredTests: RegisteredTestsConnection!
}
